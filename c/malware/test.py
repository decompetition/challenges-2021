#! /usr/bin/env python3

import os
import sys
import unittest
import subprocess
import shlex
import base64
import gzip
import socketserver

# from wherever
import deco

CONNECT_SO = """
H4sIAAAAAAAAA+2cX2gcRRzHf3vJpReb5k5JatqUZisR0mq3F7UQDTGnqekqjaQloQgNm83dJnf0
bq+929ikKEaCxaMU+iTYF1EsqE9CXwq+pET6Zv33ok8WMVChaECUREvWmdv5XXaHbtIHfaj+PrD7
3fnNfGd25/YObnZ23njhyGBEUQCpg2dhPQWQErqS8sd6oJHtt0NrtWw9hKPWBxUSnnBf1JeWdYcS
VL+vWpWKDQT1Qwiq39fAD5IiLqkqynVJ5xERvoQoJ+uwEtSYsNeLrSfipWXthKBi9wwvOZmNri/M
d5T5GuDewcs8hu2F9Iv8ueDHwT0twO8XgMMvj8LCD7et0yfef/fc8ZOfLd3p7fxrz43LvBy/3Cj4
+n+utqvGvxx69duNznMQ1rvAz+Mh8URIXAmJj7LtIXY3r4rra8UMw5gqFG2j7JglxzDAeHFkyMhY
JWsqV3as0sjQQL5oWyPmRN7y8u6eY6RnTGMyZ5v53FkL0kXbttJOtX7Rv3i/LIv2Y1L8UxFvSwXj
mB7v9rQBIPC9zfriEV/8lC9e54vP+OIbfZ8JgiAIgiAIgrh/0edvx/Tz0cIedvjWghNxv9LnP48t
1vLdgz8eYPtHf2L7eEeKHe1jRScv1vwX+r4/wCX6DZenV5xWVt12UV2jezPeMcfLLQpl5T+ulj/4
AZe9a3plWb/2S79+baVOV67rX685LayCL1Svgph7czLecWjd/1t8959zfRbzwvRjo/p83yWV11pZ
cpr0832DLH7rFdd1b2XY7nq0j6WVMeYN+H8+wzJHmafy+h29Mr1cGV25yiLu2KLoj0APEARBEARB
EARBEMT9j9Je18ufJfNngeqy66aYJplmma4ynRPlWrD82WOgzCSU9qYtsYuK9xx6F9u++9V1q48q
mxODzW0vxbeeic1B/87efU92PoJ+9jceFli52HrzVe8Jtp1mbVWfvT7XnDgXGdjWMMwa+FevnCAI
giAIgiAIgiD+P+C8Y5xn3IQZIr0Nkw96ugPzxTzldpHE/+o7MS3yd0n5v6+5Ra7jYlJyVMTbxGRk
nMP+tsh/QKTHhG7F8kJrc5hTnmwRyZm6YLsfCW2U/Kuudz7+udAEQRAEQRAEQRAE8V8D32OXwfeL
Dw8MPKN2HbImcqatdndrT2jJ/d1P7RWHAFo5W3ZKjjkBml10LG3KntYmpnP5zP5cBqqprFnOgpaZ
tcuzBU+dEmglK2/yBGg5O+eAdirvaFNFduBYM2w/yaKgWVljsmQWLCObKa2nPIthlkrmrFcSj1l9
ZiGXBl4Tr5FFTMcEbaJcBi1dLBQs2/mH+o2PQ/CxBny3Ouz9fkR+p3o32/5w3SL6cTxkXPLjuIQ8
F6JLnAP6cbwEFV/Q4O0qPj+OeyRF3ejH8RdUHG9BFCndI+pGP463oOJ4i3z+2P7z4FsTgCOtM/Cw
1J7cf5ckP67fgJqQysvLTOiSP5kIqtzfMUmPSv5UIqg3QtpHjkt+HF9DbZTKy9c/Jvy1d/vVoG52
/52U/F1qUF+Tysv9Mc22ZvCNm0nrRmzWf2+yLe7z19Y9uEf/BQiuYRC2Lke95MPP4Qh4149+XEcB
Vd2k/Xckf22hFKF4n4f535P8+Hsrr/Mg+5HLIoZ+NRVUubz8/f1ExOSff/R3hPj9ercx037hv7JJ
+38D3KzH/HhGAAA="""

READ_SO = """
H4sIAAAAAAAAA+1cW2wUVRg+s72wldIuyM0WZUFIQGFokUuVtGy73XYwbbnYxmA047Q7267ZS92d
hZaANhLEBknwgi/gi09CfND4YkyIRUzFGE01PsCDSaOSlMRoiYHgJR3Pmfn/3ZnDTsFEExPOl8x8
5/znfOc6O7t7Zs7/YqSjzSdJBFFCmkghRkgIWIk4bQ2kgp6XkVorbymZBWUcB2yS0BRw25E7JTc7
dVZ9QbBz/B5xs1NXzgJ1YOe4DvI1cO3wgS4A+Xgek9zsB3kpHA0+KJfjVcTNOIa7rhhRFvZDf3j2
0u2munJy58Bu7oH6vMaFnxecDqZZSNj1Qkh7Vw9pev3Kmrami+WvHinb+uQHD2rj10+dZPlw/HD8
fVb/g1ZvWDzU+fbBQ5+ePjhbO4NF7JKHXaXHgiL2dR752+ixsoj9KaucSlIx3443gL2HHvPJYrIm
ZMdxvomq9ifTKTVraBlDVYm6o7tTjeoZvT+eNfRMd2c4kU7p3VpvQrfTiqeofUOaGountET8gE6e
15M5ktG1KEnqyb7BYZKI9/bJ2bS8hbR37GgJqxvljfLmfLh+kz0yEh11ic6MBOEYKUxjriZewWZt
EGxvvvZWOZul/ATUcf2C/vs5+xgUGOTGAeO3jA8M/kS9zXhNIC457D6HfdJhn+OwTznszvvPtMNe
5rAvhfawMkqIgICAgICAgICAwN0J5fDPfuVY2VcraPDImOEzJ5TDn/kv5NPNzT9soOfVP9Fz9fIQ
DbH4AEu6OmlSrD5LpbET+fKON17ewKjsW0aP3jQW0eJjUHyFOVm9fITluwBM85+x8m9+h9HaGWV0
Wjn/y3bl/M0SRRpXvpkxFtICGqEAvzkZq17eWtD/Vv3AHyONOtWS3MM9yuHGmhWs1NErRqVyrLGJ
2qf20lZORelpvKyRxqVnqNalv7qfJvZQDR2M4Oihv5TR3LQy2jNF6z0XpIUdoyMUmf64zCr4a2X0
86kbM6b5EYt/cQHH0DVqAgICAgICAgICAgICAgL/L+yOdLJHmkSqLdnGnimzZ2NLp00zRLmBMvun
L10zzRHIvxBYOrCHSEMBqbZyjv+EZD+PXkaPiV9NM8gyVAXaqpY+Xj13v3+EbK/Z9tAjq1ainv59
JxdpvvyzQdA+TY9hWqf1rLW5KvCyLzyvPEsr+O+6LyAgICAgICAgICAgICBwdwDe7x3j3u+OAVdi
PkifB9FW0N2H6fB+cC1E8T97DcYhfRmXfn3GTDN+Fl76xXd2FXhJF99pfwXS74H4UeC5wEuB8+/2
hmzycem4foHvEi8Bnip12wOl7nZeAq7gypsx7fZPQsUmxHEcpyE+Aem/Q3zWPRMCAgICAgICAgIC
AgICAv8ycB87jy3c/l7cv9seDj8WXNOq98a1VLC+Xt4o162v37QWgt712Pv2r5m8na0v+Oh5V8Bt
rwL7CGdfAfYxzr7VqmMJqQsV6mMIW+EF+fUHxHNQDq5/IPZZ+ecX9r8DTnq036tfp620AHk3yKcU
z3/Was+8/LoK4n2rnMWFeQCcs+z33jJ/49a5Ou8vAHEZysHxQVyx7IsKjh4Af1rtqShsHAcwVxFF
ukTu97Cvk4rvx2+Siu+vD0vF99crHuX3SsX375O+jJE1crGY3EcK2/BVI6n2se32WaKq0bTan0j3
agk1aqQzWVXLDZG+dHIwoRt6lF7LRXOwzflxVctktGFVTxmZYRLLaEldjeaSyWEqccRUmtNwZWVb
+Wl7VLVtT3NnRI10tTJPAaxEVlk2rQ5oqShzA9C6t6u5c0eYWtu7etSIAgKldQ81dXeGUdresbOl
uUPd2db2RKRb7W5u6YhQK6t3dgcEbl8FtnOBkMONgOVzwPI+cKe+CkJOhwREzg4nDa2XspGxeQBD
qbShy/2pnNybiyei6+NRYsUGtOwAkaPDKaq02cjYKfv0TDaeTrkiKk3L6AmNZYTQYMIgstVzFpT7
0zRg6EP0bI2vnElHNUMjsj4AczQQzRRittSeLFuBYVqDloz3EVaiXYldTm82S2R6uSTp1Ba7/v4h
2LopW3vE9UovfyEIfv1QpscN00yjHtdTkdeAHddH+Xeq2OdvrqN+XG9FHnPUKzn0uA4agrJRj+u3
yLhei5C4uELstVPU43opMt6GsP0+jtlLbDMOPa7HIuNtkm8/IgppqMf1X2Rc/+XHD/ufAn0LxHE9
Gdm5Pr2oiH6IOHzUWBW7GdepEfz8Zzl9MMAxl593u/MCpw8F3MyPl5/jo5wev8+Rr3nUjzjO6fF7
ELmCy8/3/w3Q532HBN3M+8bhr79TnN7L745X/Wc4fV3QzbyDG348PyT2b5788wvOD8/txv8Twr71
HddnHce30X9J7DFCvZefo1JOh/P4ErH7j3r084KM9x+v+r/j9PnfI8DB2+i/5/T4ewmZv9748fgR
bKjH30nIfH7++pkCG/8TGPXLPfRO9pFbsQv0eB9mz9MWklvvHxWkuF+bS3BDOsQ1mG//fA99T6vN
/OeX1/8NAkxg10hMAAA="""

SHELLCODE_BIN = """
H4sIAAAAAAAAA3stt4ORgYFhP4iI28UOJPlZd9iARMzB7Bd3////H1Cel5qiyAUAsOoB2CwAAAA=
"""

def run(cmd, timeout=1, **options):
    return subprocess.run(shlex.split(cmd),
        stdout = subprocess.PIPE,
        stderr = subprocess.PIPE,
        universal_newlines = True,
        timeout = timeout,
        **options
    )


def set_ldpreload(self, filename):
    env = os.environ.copy()
    env['LD_PRELOAD'] = os.path.join("/tmp", filename)
    return env

class Tests(unittest.TestCase):

    def test_debugger(self):
        result = run('gdb -nx -q %s --batch --ex "break *payload" --ex "run"' % deco.PATH)
        expect = '\n'.join(['Welcome.', 'Breakpoint detected.', ''])

        self.assertEqual(result.returncode, 0)
        self.assertTrue(expect in result.stdout)

    def test_ptrace(self):
        result = run('strace -fi %s' % deco.PATH)
        expect = '\n'.join(['Welcome.', 'Debugger detected.', ''])

        self.assertEqual(result.returncode, 2)
        self.assertEqual(result.stdout,     expect)

    def test_read(self):
        env    = set_ldpreload(self, 'read.so')
        result = run('%s' % deco.PATH, env=env)
        expect = '\n'.join(['Welcome.', 'Sandbox detected.', ''])

        self.assertEqual(result.returncode, 3)
        self.assertTrue(expect in result.stdout)

    def test_connect(self):
        env    = set_ldpreload(self, 'connect.so')
        result = run('%s' % deco.PATH, env=env)
        expect = '\n'.join(['Welcome.', 'Connection failed.', ''])

        self.assertEqual(result.returncode, 4)
        self.assertTrue(expect in result.stdout)


    def test_okay(self):
        result = run(deco.PATH)
        expect = '\n'.join(['Welcome.', "Let's go.", 'Pwned!', ''])

        self.assertEqual(result.returncode, 55)
        self.assertEqual(result.stdout,     expect)

def start_thread():
    class MyTCPHandler(socketserver.BaseRequestHandler):
        def handle(self):
            self.request.sendall(gzip.decompress(base64.b64decode(SHELLCODE_BIN)))

    HOST, PORT = "127.0.0.1", 8888
    socketserver.TCPServer.allow_reuse_address = True
    with socketserver.TCPServer((HOST, PORT), MyTCPHandler) as server:
        server.serve_forever()


if __name__ == '__main__':
    import threading


    threading.Thread(target=start_thread, daemon=True).start()

    with open('/tmp/connect.so', 'wb') as f:
        f.write(gzip.decompress(base64.b64decode(CONNECT_SO)))

    with open('/tmp/read.so', 'wb') as f:
        f.write(gzip.decompress(base64.b64decode(READ_SO)))

    deco.main(sys.argv)
