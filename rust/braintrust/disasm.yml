"_ZN6source4mainE":
  "asm": |
    _ZN6source4mainE:
      sub     rsp, 0x138
      lea     rdi, [rsp+0x90]
      call    [mem1]
      lea     rdi, [rsp+0x78]
      lea     rsi, [rsp+0x90]
      mov     edx, 1
      call    _ZN4core4iter6traits8iterator8Iterator3nthE
      jmp     block2
    block2:
      lea     rdx, [mem2]
      lea     rdi, [rsp+0x60]
      lea     rsi, [rsp+0x78]
      call    _ZN4core6option15Option$LT$T$GT$6unwrapE
      jmp     block3
    block3:
      lea     rdi, [rsp+0x90]
      call    _ZN4core3ptr35drop_in_place$LT$std..env..Args$GT$E
      jmp     block4
    block4:
      lea     rdi, [rsp+0x60]
      call    _ZN5alloc6string6String8as_bytesE
      mov     rcx, rax
      mov     rsi, rdx
      mov     [rsp+0x50], rsi
      mov     [rsp+0x58], rcx
      jmp     block5
    block5:
      mov     rdx, [rsp+0x50]
      mov     rsi, [rsp+0x58]
      mov     rcx, rsi
      mov     [rsp+0x40], rcx
      mov     rcx, rdx
      mov     [rsp+0x48], rcx
      lea     rdi, [rsp+0xb0]
      call    _ZN6source5State3newE
      jmp     block6
    block6:
      mov     [rsp+0x118], 0
    block7:
      mov     rsi, [rsp+0x48]
      mov     rdi, [rsp+0x40]
      mov     rax, [rsp+0x118]
      mov     [rsp+0x30], rax
      call    _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3lenE
      mov     rcx, rax
      mov     [rsp+0x38], rcx
      jmp     block8
    block8:
      mov     rax, [rsp+0x30]
      mov     rcx, [rsp+0x38]
      cmp     rax, rcx
      jb      block10
    block9:
      lea     rdi, [rsp+0xb0]
      call    _ZN4core3ptr34drop_in_place$LT$source..State$GT$E
      jmp     block27
    block10:
      mov     rcx, [rsp+0x48]
      mov     rax, [rsp+0x118]
      mov     [rsp+0x28], rax
      cmp     rax, rcx
      setb    al
      test    al, 1
      jne     block12
    block11:
      jmp     block41
    block12:
      mov     rax, [rsp+0x40]
      mov     rcx, [rsp+0x28]
      mov     al, [rax+rcx]
      add     al, 0xd5
      movzx   ecx, al
      mov     [rsp+0x20], rcx
      sub     al, 0x32
      ja      block14
    block13:
      mov     rax, [rsp+0x20]
      lea     rcx, [mem3]; "\u01f0\u0001"
      movsxd  rax, [rcx+rax * 4]
      add     rax, rcx
      jmp     rax
    block14:
      jmp     block25
    block15:
      lea     rdi, [rsp+0xb0]
      mov     esi, 1
      call    _ZN6source5State4diffE
      jmp     block32
    block16:
      lea     rdi, [rsp+0xb0]
      call    _ZN6source5State4readE
      jmp     block33
    block17:
      lea     rdi, [rsp+0xb0]
      mov     esi, 0xff
      call    _ZN6source5State4diffE
      jmp     block34
    block18:
      lea     rdi, [rsp+0xb0]
      call    _ZN6source5State4dumpE
      jmp     block35
    block19:
      lea     rdi, [rsp+0xb0]
      mov     esi, 1
      call    _ZN6source5State4stepE
      jmp     block36
    block20:
      lea     rdi, [rsp+0xb0]
      xor     esi, esi
      call    _ZN6source5State4stepE
      jmp     block37
    block21:
      mov     rsi, [rsp+0x118]
      lea     rdi, [rsp+0xb0]
      mov     edx, 1
      call    _ZN6source5State4jumpE
      mov     rcx, rax
      mov     [rsp+0x18], rcx
      jmp     block22
    block22:
      mov     rax, [rsp+0x18]
      mov     [rsp+0x118], rax
      jmp     block25
    block23:
      mov     rsi, [rsp+0x118]
      lea     rdi, [rsp+0xb0]
      xor     edx, edx
      call    _ZN6source5State4jumpE
      mov     rcx, rax
      mov     [rsp+0x10], rcx
      jmp     block24
    block24:
      mov     rax, [rsp+0x10]
      mov     [rsp+0x118], rax
    block25:
      mov     rax, [rsp+0x118]
      add     rax, 1
      mov     [rsp+8], rax
      setb    al
      test    al, 1
      jne     block43
    block26:
      mov     rax, [rsp+8]
      mov     [rsp+0x118], rax
      jmp     block7
    block27:
      lea     rdi, [rsp+0x60]
      call    _ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$E
      add     rsp, 0x138
      ret
    block28:
      lea     rdi, [rsp+0xb0]
      call    _ZN4core3ptr34drop_in_place$LT$source..State$GT$E
    block29:
      lea     rdi, [rsp+0x60]
      call    _ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$E
      jmp     block31
    block30:
      lea     rdi, [rsp+0x90]
      call    _ZN4core3ptr35drop_in_place$LT$std..env..Args$GT$E
    block31:
      mov     rdi, [rsp+0x128]
      call    _Unwind_Resume@plt
      ud2
    block32:
      jmp     block25
    block33:
      jmp     block25
    block34:
      jmp     block25
    block35:
      jmp     block25
    block36:
      jmp     block25
    block37:
      jmp     block25
    block38:
      mov     rcx, rax
      mov     eax, edx
      mov     [rsp+0x128], rcx
      mov     [rsp+0x130], eax
      jmp     block30
    block39:
      mov     rcx, rax
      mov     eax, edx
      mov     [rsp+0x128], rcx
      mov     [rsp+0x130], eax
      jmp     block29
    block40:
      mov     rcx, rax
      mov     eax, edx
      mov     [rsp+0x128], rcx
      mov     [rsp+0x130], eax
      jmp     block28
    block41:
      mov     rsi, [rsp+0x48]
      mov     rdi, [rsp+0x28]
      lea     rdx, [mem4]
      mov     rcx, [mem5]
      call    rcx
      jmp     block42
    block42:
      ud2
    block43:
      lea     rdi, [str.0]; "attempt to add with overflow/..."
      lea     rdx, [mem6]
      mov     rcx, [mem7]
      mov     esi, 0x1c
      call    rcx
      jmp     block42
    block44:
      int3
"_ZN6source5State3newE":
  "asm": |
    _ZN6source5State3newE:
      sub     rsp, 0x188
      mov     [rsp+0x50], rdx
      mov     [rsp+0x58], rsi
      mov     [rsp+0x60], rdi
      mov     [rsp+0x68], rdi
      mov     [rsp+0x177], 0
      lea     rdi, [rsp+0x70]
      call    _ZN5alloc3vec12Vec$LT$T$GT$3newE
      lea     rdi, [rsp+0x88]
      call    _ZN3std11collections4hash3map20HashMap$LT$K$C$V$GT$3newE
      jmp     block1
    block1:
      mov     rsi, [rsp+0x50]
      mov     rdi, [rsp+0x58]
      mov     [rsp+0x177], 1
      call    _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iterE
      mov     rcx, rax
      mov     rsi, rdx
      mov     [rsp+0x40], rsi
      mov     [rsp+0x48], rcx
      jmp     block2
    block2:
      mov     rdx, [rsp+0x40]
      mov     rsi, [rsp+0x48]
      lea     rdi, [rsp+0xd0]
      call    _ZN4core4iter6traits8iterator8Iterator9enumerateE
      jmp     block3
    block3:
      lea     rdi, [rsp+0xb8]
      lea     rsi, [rsp+0xd0]
      call    _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iterE
      jmp     block4
    block4:
      mov     rax, [rsp+0xb8]
      mov     [rsp+0xe8], rax
      mov     rax, [rsp+0xc0]
      mov     [rsp+0xf0], rax
      mov     rax, [rsp+0xc8]
      mov     [rsp+0xf8], rax
    block5:
      lea     rdi, [rsp+0xe8]
      call    _ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4nextE
      mov     rcx, rax
      mov     rsi, rdx
      mov     [rsp+0x30], rsi
      mov     [rsp+0x38], rcx
      jmp     block6
    block6:
      mov     rax, [rsp+0x30]
      mov     rcx, [rsp+0x38]
      mov     [rsp+0x100], rcx
      mov     [rsp+0x108], rax
      mov     rax, [rsp+0x108]
      test    rax, rax
      setne   al
      movzx   eax, al
      je      block9
    block7:
      jmp     block8
    block8:
      jmp     block11
    block9:
      lea     rdi, [rsp+0x70]
      call    _ZN5alloc3vec16Vec$LT$T$C$A$GT$3lenE
      mov     rcx, rax
      mov     [rsp+0x28], rcx
      jmp     block22
    block10:
      ud2
    block11:
      mov     rax, [rsp+0x100]
      mov     [rsp+0x18], rax
      mov     rax, [rsp+0x108]
      mov     [rsp+0x20], rax
      cmp     [rax], 0x5b
      jne     block13
    block12:
      mov     rsi, [rsp+0x18]
      lea     rdi, [rsp+0x70]
      call    _ZN5alloc3vec16Vec$LT$T$C$A$GT$4pushE
      jmp     block14
    block13:
      jmp     block15
    block14:
      jmp     block15
    block15:
      mov     rax, [rsp+0x20]
      cmp     [rax], 0x5d
      jne     block17
    block16:
      lea     rdi, [rsp+0x70]
      call    _ZN5alloc3vec16Vec$LT$T$C$A$GT$3popE
      mov     rcx, rax
      mov     rsi, rdx
      mov     [rsp+8], rsi
      mov     [rsp+0x10], rcx
      jmp     block18
    block17:
      jmp     block21
    block18:
      mov     rsi, [rsp+8]
      mov     rdi, [rsp+0x10]
      lea     rdx, [mem1]
      call    _ZN4core6option15Option$LT$T$GT$6unwrapE
      mov     rcx, rax
      mov     [rsp], rcx
      jmp     block19
    block19:
      mov     rdx, [rsp]
      mov     rsi, [rsp+0x18]
      lea     rdi, [rsp+0x88]
      call    _ZN3std11collections4hash3map24HashMap$LT$K$C$V$C$S$GT$6insertE
      mov     rcx, rax
      mov     rsi, rdx
      jmp     block20
    block20:
      mov     rdx, [rsp+0x18]
      mov     rsi, [rsp]
      lea     rdi, [rsp+0x88]
      call    _ZN3std11collections4hash3map24HashMap$LT$K$C$V$C$S$GT$6insertE
      mov     rcx, rax
      mov     rsi, rdx
      jmp     block21
    block21:
      jmp     block5
    block22:
      mov     rax, [rsp+0x28]
      cmp     rax, 0
      sete    al
      xor     al, 0xff
      test    al, 1
      jne     block24
    block23:
      jmp     block25
    block24:
      lea     rdi, [mem2]; "assertion failed: s.len() == ..."
      lea     rdx, [mem3]
      mov     rcx, [mem4]
      mov     esi, 0x1e
      call    rcx
      jmp     block36
    block25:
      mov     [rsp+0x177], 0
      movups  xmm0, [rsp+0x88]
      movups  xmm1, [rsp+0x98]
      movups  xmm2, [rsp+0xa8]
      movaps  [rsp+0x130], xmm2
      movaps  [rsp+0x120], xmm1
      movaps  [rsp+0x110], xmm0
      lea     rdi, [rsp+0x140]
      call    _ZN5alloc3vec12Vec$LT$T$GT$3newE
      jmp     block26
    block26:
      lea     rdi, [rsp+0x158]
      call    _ZN5alloc3vec12Vec$LT$T$GT$3newE
      jmp     block27
    block27:
      mov     rdi, [rsp+0x60]
      lea     rsi, [rsp+0x110]
      mov     edx, 0x30
      call    memcpy@plt
      mov     rax, [rsp+0x60]
      mov     rcx, [rsp+0x140]
      mov     [rax+0x30], rcx
      mov     rcx, [rsp+0x148]
      mov     [rax+0x38], rcx
      mov     rcx, [rsp+0x150]
      mov     [rax+0x40], rcx
      mov     rcx, [rsp+0x158]
      mov     [rax+0x48], rcx
      mov     rcx, [rsp+0x160]
      mov     [rax+0x50], rcx
      mov     rcx, [rsp+0x168]
      mov     [rax+0x58], rcx
      mov     [rax+0x60], 0
      mov     [rsp+0x177], 0
      lea     rdi, [rsp+0x70]
      call    _ZN4core3ptr49drop_in_place$LT$alloc..vec..Vec$LT$usize$GT$$GT$E
      mov     rax, [rsp+0x68]
      add     rsp, 0x188
      ret
    block28:
      lea     rdi, [rsp+0x140]
      call    _ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$E
    block29:
      lea     rdi, [rsp+0x110]
      call    _ZN4core3ptr78drop_in_place$LT$std..collections..hash..map..HashMap$LT$usize$C$usize$GT$$GT$E
      jmp     block32
    block30:
      lea     rdi, [rsp+0x70]
      call    _ZN4core3ptr49drop_in_place$LT$alloc..vec..Vec$LT$usize$GT$$GT$E
      mov     rdi, [rsp+0x178]
      call    _Unwind_Resume@plt
      ud2
    block31:
      lea     rdi, [rsp+0x88]
      call    _ZN4core3ptr78drop_in_place$LT$std..collections..hash..map..HashMap$LT$usize$C$usize$GT$$GT$E
      jmp     block30
    block32:
      test    [rsp+0x177], 1
      jne     block31
    block33:
      jmp     block30
    block34:
      mov     rcx, rax
      mov     eax, edx
      mov     [rsp+0x178], rcx
      mov     [rsp+0x180], eax
      jmp     block30
    block35:
      mov     rcx, rax
      mov     eax, edx
      mov     [rsp+0x178], rcx
      mov     [rsp+0x180], eax
      jmp     block32
    block36:
      ud2
      mov     rcx, rax
      mov     eax, edx
      mov     [rsp+0x178], rcx
      mov     [rsp+0x180], eax
      jmp     block29
    block37:
      mov     rcx, rax
      mov     eax, edx
      mov     [rsp+0x178], rcx
      mov     [rsp+0x180], eax
      jmp     block28
    block38:
      int3
"_ZN6source5State4diffE":
  "asm": |
    _ZN6source5State4diffE:
      sub     rsp, 0x10
      mov     [rsp], rdi
      mov     al, sil
      add     al, [rdi+0x60]
      mov     [rsp+0xf], al
      mov     rax, [rsp]
      mov     cl, [rsp+0xf]
      mov     [rax+0x60], cl
      add     rsp, 0x10
      ret
"_ZN6source5State4dumpE":
  "asm": |
    _ZN6source5State4dumpE:
      sub     rsp, 0x28
      mov     al, [rdi+0x60]
      mov     [rsp+7], al
      call    [mem1]
      mov     [rsp+0x20], rax
      lea     rdx, [rsp+7]
      lea     rdi, [rsp+8]
      lea     rsi, [rsp+0x20]
      mov     ecx, 1
      call    [mem2]
      lea     rdi, [rsp+8]
      call    _ZN4core6result19Result$LT$T$C$E$GT$2okE
      add     rsp, 0x28
      ret
"_ZN6source5State4jumpE":
  "asm": |
    _ZN6source5State4jumpE:
      sub     rsp, 0x28
      mov     [rsp+0x10], rdi
      mov     al, dl
      mov     [rsp+0x18], rsi
      cmp     [rdi+0x60], 0
      setne   cl
      xor     al, cl
      test    al, 1
      jne     block2
    block1:
      jmp     block3
    block2:
      mov     rdi, [rsp+0x10]
      lea     rsi, [rsp+0x18]
      lea     rdx, [mem1]
      call    _ZN110_$LT$std..collections..hash..map..HashMap$LT$K$C$V$C$S$GT$$u20$as$u20$core..ops..index..Index$LT$$RF$Q$GT$$GT$5indexE
      mov     [rsp+8], rax
      jmp     block4
    block3:
      mov     rax, [rsp+0x18]
      mov     [rsp+0x20], rax
      jmp     block5
    block4:
      mov     rax, [rsp+8]
      mov     rax, [rax]
      mov     [rsp+0x20], rax
    block5:
      mov     rax, [rsp+0x20]
      add     rsp, 0x28
      ret
"_ZN6source5State4readE":
  "asm": |
    _ZN6source5State4readE:
      sub     rsp, 0x38
      mov     [rsp], rdi
      mov     [rsp+0xf], 0
      call    [mem1]
      mov     [rsp+0x20], rax
      mov     rax, [mem2]
      lea     rdi, [rsp+0x20]
      lea     rsi, [rsp+0xf]
      mov     edx, 1
      call    rax
      mov     [rsp+0x30], rdx
      mov     [rsp+0x28], rax
      mov     rax, [rsp+0x28]
      mov     [rsp+0x10], rax
      mov     rax, [rsp+0x30]
      mov     [rsp+0x18], rax
      lea     rdi, [rsp+0x10]
      call    _ZN4core6result19Result$LT$T$C$E$GT$2okE
      mov     rax, [rsp]
      mov     cl, [rsp+0xf]
      mov     [rax+0x60], cl
      add     rsp, 0x38
      ret
"_ZN6source5State4stepE":
  "asm": |
    _ZN6source5State4stepE:
      sub     rsp, 0x18
      mov     [rsp+8], rdi
      mov     al, sil
      test    al, 1
      jne     block2
    block1:
      jmp     block3
    block2:
      mov     rax, [rsp+8]
      mov     rdi, rax
      add     rdi, 0x30
      movzx   esi, [rax+0x60]
      call    _ZN5alloc3vec16Vec$LT$T$C$A$GT$4pushE
      jmp     block4
    block3:
      mov     rax, [rsp+8]
      mov     rdi, rax
      add     rdi, 0x48
      movzx   esi, [rax+0x60]
      call    _ZN5alloc3vec16Vec$LT$T$C$A$GT$4pushE
      jmp     block5
    block4:
      mov     rdi, [rsp+8]
      add     rdi, 0x48
      call    _ZN5alloc3vec16Vec$LT$T$C$A$GT$3popE
      mov     [rsp+6], al
      mov     [rsp+7], dl
      mov     al, [rsp+6]
      mov     cl, [rsp+7]
      movzx   esi, cl
      movzx   edi, al
      and     edi, 1
      xor     edx, edx
      call    _ZN4core6option15Option$LT$T$GT$9unwrap_orE
      mov     [rsp+5], al
      mov     rax, [rsp+8]
      mov     cl, [rsp+5]
      mov     [rax+0x60], cl
      jmp     block6
    block5:
      mov     rdi, [rsp+8]
      add     rdi, 0x30
      call    _ZN5alloc3vec16Vec$LT$T$C$A$GT$3popE
      mov     [rsp+3], al
      mov     [rsp+4], dl
      mov     al, [rsp+3]
      mov     cl, [rsp+4]
      movzx   esi, cl
      movzx   edi, al
      and     edi, 1
      xor     edx, edx
      call    _ZN4core6option15Option$LT$T$GT$9unwrap_orE
      mov     [rsp+2], al
      mov     rax, [rsp+8]
      mov     cl, [rsp+2]
      mov     [rax+0x60], cl
    block6:
      add     rsp, 0x18
      ret
